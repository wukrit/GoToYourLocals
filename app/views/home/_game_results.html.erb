<%
  # Find all events for the selected game using our normalized names
  game_events = filter_events_by_game(current_user.events, selected_game)

  # Get the event IDs to use in subsequent queries
  event_ids = game_events.map(&:id)

  # Use the event IDs to get properly eager-loaded events
  game_events_with_associations = Event.includes(
    :tournament,
    :user_event_participations,
    matches: [:users, :user_match_participations]
  ).where(id: event_ids)

  # Group these events by tournament
  tournaments_with_events = game_events_with_associations.group_by(&:tournament)

  # Sort tournaments by date
  sorted_tournaments = tournaments_with_events.keys.sort_by { |t| t.start_at || Time.new(1970) }.reverse
%>

<div class="card">
  <div class="card-header">
    <h4><%= selected_game %> Tournament Results</h4>
  </div>
  <div class="card-body">
    <div class="table-responsive">
      <table class="table table-striped">
        <thead>
          <tr>
            <th>Tournament</th>
            <th>Date</th>
            <th>Record</th>
            <th>Placement</th>
            <th>Wins</th>
            <th>Losses</th>
          </tr>
        </thead>
        <tbody>
          <% sorted_tournaments.each do |tournament| %>
          <% events = tournaments_with_events[tournament] %>
          <% events.each do |event| %>
          <%
                # Get user's participation in this event
                participation = current_user.user_event_participations.find_by(event: event)

                # Get matches for this event
                all_matches = event.matches.includes(user_match_participations: :user)

                # Get user's matches
                user_matches = all_matches.joins(:user_match_participations)
                                .where(user_match_participations: { user_id: current_user.id })

                # Get wins and losses
                wins = user_matches.joins(:user_match_participations)
                        .where(user_match_participations: { user_id: current_user.id, is_winner: true })
                        .distinct

                losses = user_matches.joins(:user_match_participations)
                         .where(user_match_participations: { user_id: current_user.id, is_winner: false })
                         .distinct

                record = "#{wins.size}-#{losses.size}"
              %>
          <tr>
            <td><%= tournament.name %></td>
            <td><%= tournament.start_at&.strftime("%b %d, %Y") || "Unknown" %></td>
            <td><strong><%= record %></strong></td>
            <td><%= participation&.final_placement || "N/A" %></td>
            <td>
              <% if wins.any? %>
              <ul class="list-unstyled">
                <% wins.each do |win| %>
                <%
                          # Find opponent
                          opponent_participation = win.user_match_participations
                                                    .where.not(user_id: current_user.id)
                                                    .first
                          opponent = opponent_participation&.user
                        %>
                <li>
                  <% if opponent %>
                  <strong><%= opponent.tag || "Unknown" %></strong>
                  <% else %>
                  <%
                              # Try to extract opponent name from score
                              opponent_name = extract_opponent_from_score(win.display_score, current_user.tag)
                            %>
                  <strong><%= opponent_name || "Unknown Opponent" %></strong>
                  <% end %>
                  <small class="text-muted"><%= win.display_score || win.full_round_text || "Win" %></small>
                </li>
                <% end %>
              </ul>
              <% else %>
              None
              <% end %>
            </td>
            <td>
              <% if losses.any? %>
              <ul class="list-unstyled">
                <% losses.each do |loss| %>
                <%
                          # Find opponent
                          opponent_participation = loss.user_match_participations
                                                     .where.not(user_id: current_user.id)
                                                     .first
                          opponent = opponent_participation&.user
                        %>
                <li>
                  <% if opponent %>
                  <strong><%= opponent.tag || "Unknown" %></strong>
                  <% else %>
                  <%
                              # Try to extract opponent name from score
                              opponent_name = extract_opponent_from_score(loss.display_score, current_user.tag)
                            %>
                  <strong><%= opponent_name || "Unknown Opponent" %></strong>
                  <% end %>
                  <small class="text-muted"><%= loss.display_score || loss.full_round_text || "Loss" %></small>
                </li>
                <% end %>
              </ul>
              <% else %>
              None
              <% end %>
            </td>
          </tr>
          <% end %>
          <% end %>
        </tbody>
      </table>
    </div>
  </div>
</div>